// <auto-generated />
using System;
using Application.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Application.Database.Migrations
{
    [DbContext(typeof(TrainingDbContext))]
    [Migration("20231110172900_MigrationUsersSeed")]
    partial class MigrationUsersSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.13");

            modelBuilder.Entity("Domain.TrainingPlans.TrainingPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TrainingPlans");
                });

            modelBuilder.Entity("Domain.TrainingPlans.TrainingPlanExercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("MuscleGroup")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TutorialUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TrainingPlanExercises");
                });

            modelBuilder.Entity("Domain.Trainings.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double>("Kg")
                        .HasColumnType("REAL");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<int>("Reps")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sets")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TrainingId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrainingPlanExerciseId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TrainingId");

                    b.HasIndex("TrainingPlanExerciseId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("Domain.Trainings.Training", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ed78a8c9-201f-491b-8afe-a080fc1cb6df"),
                            BirthDate = new DateTime(2003, 11, 10, 18, 29, 0, 513, DateTimeKind.Local).AddTicks(2431),
                            Email = "admin",
                            Password = "EdaZ/7r06IeBJxTfea14VxKVrZZz2zm0SWz8vfzhUpI=:uIOLRb+P9iF2AuznnF2Iuw==:10000:SHA256",
                            Role = 2,
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("18821ff2-7224-4316-ba1f-3883f9089287"),
                            BirthDate = new DateTime(2005, 11, 10, 18, 29, 0, 522, DateTimeKind.Local).AddTicks(7089),
                            Email = "user",
                            Password = "ik/1g2rQCe3FZqmPv7nabsM563LpBfBKwsxQgLr8z2I=:iurqxkfltF1pHzjmblSwbQ==:10000:SHA256",
                            Role = 0,
                            Username = "user"
                        });
                });

            modelBuilder.Entity("TrainingPlanTrainingPlanExercise", b =>
                {
                    b.Property<Guid>("ExercisesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrainingPlanId")
                        .HasColumnType("TEXT");

                    b.HasKey("ExercisesId", "TrainingPlanId");

                    b.HasIndex("TrainingPlanId");

                    b.ToTable("TrainingPlanTrainingPlanExercise");
                });

            modelBuilder.Entity("Domain.Trainings.Exercise", b =>
                {
                    b.HasOne("Domain.Trainings.Training", "Training")
                        .WithMany("Exercises")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.TrainingPlans.TrainingPlanExercise", "TrainingPlanExercise")
                        .WithMany()
                        .HasForeignKey("TrainingPlanExerciseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Training");

                    b.Navigation("TrainingPlanExercise");
                });

            modelBuilder.Entity("TrainingPlanTrainingPlanExercise", b =>
                {
                    b.HasOne("Domain.TrainingPlans.TrainingPlanExercise", null)
                        .WithMany()
                        .HasForeignKey("ExercisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.TrainingPlans.TrainingPlan", null)
                        .WithMany()
                        .HasForeignKey("TrainingPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Trainings.Training", b =>
                {
                    b.Navigation("Exercises");
                });
#pragma warning restore 612, 618
        }
    }
}
